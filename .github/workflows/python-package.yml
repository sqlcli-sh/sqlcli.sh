# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  POETRY_URL: https://install.python-poetry.org

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache
      uses: actions/cache@v3.3.2
      with:
        path: ~/.cache/pypoetry
        key: poetry-cache-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ env.POETRY_VERSION }}
      # virtualenv cache should depends on OS, Python version and `poetry.lock` (and optionally workflow files).
    - name: Cache Packages
      uses: actions/cache@v3
      with:
        path: ~/.local
        key: poetry-local-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
    - name: Install Poetry ${{ env.POETRY_VERSION }}
      run: |
          curl -sSL ${{ env.POETRY_URL }} | python -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Install Dependencies
      run: poetry install
    - name: Install PoethePoet
      run: pipx install poethepoet
    - name: Lint with flake8
      run: |
        poe lint
    - name: Test with pytest
      run: |
        poe test
